// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AccessToken Access токен пользователя
type AccessToken = string

// AccessTokenExpiresAt Время истечения Access токена
type AccessTokenExpiresAt = openapi_types.Date

// Email Уникальный email пользователя
type Email = string

// ErrorResponse Используется для возвращения ошибки пользователю
type ErrorResponse struct {
	// Reason Описание ошибки в свободной форме
	Reason string `json:"reason"`
}

// IsAdmin defines model for is_admin.
type IsAdmin = bool

// LoginUserReq Тело запроса при входе пользователя
type LoginUserReq struct {
	// Email Уникальный email пользователя
	Email Email `json:"email"`

	// Password Пороль пользователя
	Password Password `json:"password"`
}

// LoginUserRes Тело ответа при успешном входе пользователя
type LoginUserRes struct {
	// AccessToken Access токен пользователя
	AccessToken AccessToken `json:"access_token"`

	// AccessTokenExpiresAt Время истечения Access токена
	AccessTokenExpiresAt AccessTokenExpiresAt `json:"access_token_expires_at"`

	// RefreshToken Refresh токен пользователя
	RefreshToken RefreshToken `json:"refresh_token"`

	// RefreshTokenExpiresAt Время истечения Refresh токена
	RefreshTokenExpiresAt RefreshTokenExpiresAt `json:"refresh_token_expires_at"`

	// SessionId ID созданной сессии
	SessionId SessionId `json:"session_id"`

	// User Тело ответа при успешной регистрации пользователя
	User UserRes `json:"user"`
}

// Password Пороль пользователя
type Password = string

// RefreshToken Refresh токен пользователя
type RefreshToken = string

// RefreshTokenExpiresAt Время истечения Refresh токена
type RefreshTokenExpiresAt = openapi_types.Date

// RenewAccessTokenReq Запрос на обновление access токена
type RenewAccessTokenReq struct {
	// RefreshToken Refresh токен пользователя
	RefreshToken RefreshToken `json:"refresh_token"`
}

// RenewAccessTokenRes Ответ на запрос обновления access токена
type RenewAccessTokenRes struct {
	// AccessToken Access токен пользователя
	AccessToken AccessToken `json:"access_token"`

	// AccessTokenExpiresAt Время истечения Access токена
	AccessTokenExpiresAt AccessTokenExpiresAt `json:"access_token_expires_at"`
}

// SessionId ID созданной сессии
type SessionId = int

// UserReq Тело запроса при регистрации нового пользователя
type UserReq struct {
	// Email Уникальный email пользователя
	Email   Email   `json:"email"`
	IsAdmin IsAdmin `json:"is_admin"`

	// Password Пороль пользователя
	Password Password `json:"password"`

	// Username Уникальный логин пользователя
	Username Username `json:"username"`
}

// UserRes Тело ответа при успешной регистрации пользователя
type UserRes struct {
	// Email Уникальный email пользователя
	Email   Email   `json:"email"`
	IsAdmin IsAdmin `json:"is_admin"`

	// Username Уникальный логин пользователя
	Username Username `json:"username"`
}

// Username Уникальный логин пользователя
type Username = string

// LogInJSONRequestBody defines body for LogIn for application/json ContentType.
type LogInJSONRequestBody = LoginUserReq

// RenewAccessTokenJSONRequestBody defines body for RenewAccessToken for application/json ContentType.
type RenewAccessTokenJSONRequestBody = RenewAccessTokenReq

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody = UserReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LogInWithBody request with any body
	LogInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogIn(ctx context.Context, body LogInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogOut request
	LogOut(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckServer request
	CheckServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RenewAccessTokenWithBody request with any body
	RenewAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RenewAccessToken(ctx context.Context, body RenewAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SignInWithBody request with any body
	SignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SignIn(ctx context.Context, body SignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LogInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogIn(ctx context.Context, body LogInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogOut(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogOutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenewAccessTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenewAccessTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenewAccessToken(ctx context.Context, body RenewAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenewAccessTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignIn(ctx context.Context, body SignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLogInRequest calls the generic LogIn builder with application/json body
func NewLogInRequest(server string, body LogInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogInRequestWithBody(server, "application/json", bodyReader)
}

// NewLogInRequestWithBody generates requests for LogIn with any type of body
func NewLogInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogOutRequest generates requests for LogOut
func NewLogOutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckServerRequest generates requests for CheckServer
func NewCheckServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRenewAccessTokenRequest calls the generic RenewAccessToken builder with application/json body
func NewRenewAccessTokenRequest(server string, body RenewAccessTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRenewAccessTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRenewAccessTokenRequestWithBody generates requests for RenewAccessToken with any type of body
func NewRenewAccessTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/renew")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSignInRequest calls the generic SignIn builder with application/json body
func NewSignInRequest(server string, body SignInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSignInRequestWithBody(server, "application/json", bodyReader)
}

// NewSignInRequestWithBody generates requests for SignIn with any type of body
func NewSignInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LogInWithBodyWithResponse request with any body
	LogInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogInResponse, error)

	LogInWithResponse(ctx context.Context, body LogInJSONRequestBody, reqEditors ...RequestEditorFn) (*LogInResponse, error)

	// LogOutWithResponse request
	LogOutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogOutResponse, error)

	// CheckServerWithResponse request
	CheckServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CheckServerResponse, error)

	// RenewAccessTokenWithBodyWithResponse request with any body
	RenewAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenewAccessTokenResponse, error)

	RenewAccessTokenWithResponse(ctx context.Context, body RenewAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RenewAccessTokenResponse, error)

	// SignInWithBodyWithResponse request with any body
	SignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignInResponse, error)

	SignInWithResponse(ctx context.Context, body SignInJSONRequestBody, reqEditors ...RequestEditorFn) (*SignInResponse, error)
}

type LogInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginUserRes
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r LogInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogOutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r LogOutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogOutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CheckServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RenewAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenewAccessTokenRes
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RenewAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RenewAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SignInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRes
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SignInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SignInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LogInWithBodyWithResponse request with arbitrary body returning *LogInResponse
func (c *ClientWithResponses) LogInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogInResponse, error) {
	rsp, err := c.LogInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogInResponse(rsp)
}

func (c *ClientWithResponses) LogInWithResponse(ctx context.Context, body LogInJSONRequestBody, reqEditors ...RequestEditorFn) (*LogInResponse, error) {
	rsp, err := c.LogIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogInResponse(rsp)
}

// LogOutWithResponse request returning *LogOutResponse
func (c *ClientWithResponses) LogOutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogOutResponse, error) {
	rsp, err := c.LogOut(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogOutResponse(rsp)
}

// CheckServerWithResponse request returning *CheckServerResponse
func (c *ClientWithResponses) CheckServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CheckServerResponse, error) {
	rsp, err := c.CheckServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckServerResponse(rsp)
}

// RenewAccessTokenWithBodyWithResponse request with arbitrary body returning *RenewAccessTokenResponse
func (c *ClientWithResponses) RenewAccessTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenewAccessTokenResponse, error) {
	rsp, err := c.RenewAccessTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenewAccessTokenResponse(rsp)
}

func (c *ClientWithResponses) RenewAccessTokenWithResponse(ctx context.Context, body RenewAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RenewAccessTokenResponse, error) {
	rsp, err := c.RenewAccessToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenewAccessTokenResponse(rsp)
}

// SignInWithBodyWithResponse request with arbitrary body returning *SignInResponse
func (c *ClientWithResponses) SignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignInResponse, error) {
	rsp, err := c.SignInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignInResponse(rsp)
}

func (c *ClientWithResponses) SignInWithResponse(ctx context.Context, body SignInJSONRequestBody, reqEditors ...RequestEditorFn) (*SignInResponse, error) {
	rsp, err := c.SignIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignInResponse(rsp)
}

// ParseLogInResponse parses an HTTP response from a LogInWithResponse call
func ParseLogInResponse(rsp *http.Response) (*LogInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginUserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseLogOutResponse parses an HTTP response from a LogOutWithResponse call
func ParseLogOutResponse(rsp *http.Response) (*LogOutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogOutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCheckServerResponse parses an HTTP response from a CheckServerWithResponse call
func ParseCheckServerResponse(rsp *http.Response) (*CheckServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRenewAccessTokenResponse parses an HTTP response from a RenewAccessTokenWithResponse call
func ParseRenewAccessTokenResponse(rsp *http.Response) (*RenewAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RenewAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenewAccessTokenRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSignInResponse parses an HTTP response from a SignInWithResponse call
func ParseSignInResponse(rsp *http.Response) (*SignInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SignInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вход пользователя
	// (POST /login)
	LogIn(c *gin.Context)
	// Выход пользователя
	// (POST /logout)
	LogOut(c *gin.Context)
	// Проверка доступности сервера
	// (GET /ping)
	CheckServer(c *gin.Context)
	// Обновлене access токена
	// (POST /renew)
	RenewAccessToken(c *gin.Context)
	// Регистрация нового пользователя
	// (POST /signin)
	SignIn(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// LogIn operation middleware
func (siw *ServerInterfaceWrapper) LogIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogIn(c)
}

// LogOut operation middleware
func (siw *ServerInterfaceWrapper) LogOut(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogOut(c)
}

// CheckServer operation middleware
func (siw *ServerInterfaceWrapper) CheckServer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckServer(c)
}

// RenewAccessToken operation middleware
func (siw *ServerInterfaceWrapper) RenewAccessToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RenewAccessToken(c)
}

// SignIn operation middleware
func (siw *ServerInterfaceWrapper) SignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignIn(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/login", wrapper.LogIn)
	router.POST(options.BaseURL+"/logout", wrapper.LogOut)
	router.GET(options.BaseURL+"/ping", wrapper.CheckServer)
	router.POST(options.BaseURL+"/renew", wrapper.RenewAccessToken)
	router.POST(options.BaseURL+"/signin", wrapper.SignIn)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
